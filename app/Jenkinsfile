#!/usr/bin/env groovy

node {
    stage('checkout') {
        // Clona el repositorio en la raíz del workspace
        checkout scm
    }

    gitlabCommitStatus('build') {
        docker.image('jhipster/jhipster:v8.11.0').inside('-u jhipster -e MAVEN_OPTS="-Duser.home=./"') {

            // --- INICIO: Entramos a la carpeta 'app' ---
            dir('app') {

                stage('check java') {
                    // Este comando no depende de estar en 'app', pero lo dejamos dentro por consistencia
                    sh "java -version"
                }

                stage('clean') {
                    sh "chmod +x mvnw" // Aseguramos permisos
                    sh "./mvnw -ntp clean -P-webapp"
                }
                stage('nohttp') {
                    sh "./mvnw -ntp checkstyle:check"
                }

                stage('install tools') {
                    sh "./mvnw -ntp com.github.eirslett:frontend-maven-plugin:install-node-and-npm@install-node-and-npm"
                }

                stage('npm install') {
                    // Podría ser también: sh "./mvnw -ntp com.github.eirslett:frontend-maven-plugin:npm@npm-install"
                    // O si prefieres ejecutar npm directamente:
                    sh "npm install"
                }

                stage('backend tests') {
                    try {
                        sh "./mvnw -ntp verify -P-webapp"
                    } catch(err) {
                        throw err
                    } finally {
                        // Las rutas de los reportes son relativas al workspace, no a 'app'
                        // Pero como target está dentro de app, ajustamos la ruta o usamos un patrón más genérico
                        junit '**/target/surefire-reports/TEST-*.xml,**/target/failsafe-reports/TEST-*.xml'
                    }
                }

                stage('frontend tests') {
                    try {
                       // Asumiendo que npm install ya se corrió antes o aquí
                       sh "npm install" // Puede ser redundante si la etapa 'npm install' ya lo hizo
                       sh "npm test"
                    } catch(err) {
                        throw err
                    } finally {
                        // Ajustamos ruta si es necesario, 'target' está en 'app/target'
                        junit '**/target/test-results/TESTS-results-jest.xml'
                    }
                }

                stage('packaging') {
                    sh "./mvnw -ntp verify -P-webapp -Pprod -DskipTests"
                    // El artefacto estará en app/target/*.jar relativo al workspace
                    archiveArtifacts artifacts: 'app/target/*.jar', fingerprint: true
                }

                stage('publish docker') {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-login', passwordVariable: 'DOCKER_REGISTRY_PWD', usernameVariable: 'DOCKER_REGISTRY_USER')]) {
                        // Jib usa el pom.xml, así que debe ejecutarse desde 'app'
                        sh "./mvnw -ntp jib:build -Ddocker.username=${DOCKER_REGISTRY_USER} -Ddocker.password=${DOCKER_REGISTRY_PWD}"
                    }
                }

            }
            // --- FIN: Salimos del bloque dir('app') ---
        }
    }
